/*
 * Adapted for DocumentationGenerator.jl
 *     https://github.com/JuliaDocs/DocumentationGenerator.jl
 *
 * Originally Part of Documenter.jl
 *     https://github.com/JuliaDocs/Documenter.jl
 *
 * License: MIT
 */

// parseUri 1.2.2
// (c) Steven Levithan <stevenlevithan.com>
// MIT License
function parseUri (str) {
    var	o   = parseUri.options,
    m   = o.parser[o.strictMode ? "strict" : "loose"].exec(str),
    uri = {},
    i   = 14;

    while (i--) uri[o.key[i]] = m[i] || "";

    uri[o.q.name] = {};
    uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
        if ($1) uri[o.q.name][$1] = $2;
    });

    return uri;
};
parseUri.options = {
    strictMode: false,
    key: ["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],
    q:   {
        name:   "queryKey",
        parser: /(?:^|&)([^&=]*)=?([^&]*)/g
    },
    parser: {
        strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
        loose:  /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
    }
};

requirejs.config({
    paths: {
        'jquery': 'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min',
        'lodash': 'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.min',
    }
});

var currentScript = document.currentScript;

require(["jquery", "lodash"], function($, _) {
    $("#search-form").submit(function(e) {
        e.preventDefault()
    })

    $(function(){
        function update_search(querystring) {
            $.post("https://pkg.julialang.org/search/docs", JSON.stringify({
                "pattern": querystring,
                "package": "{{{UUID}}}"
            }), function (data) {
                if (data["success"] && data["data"] && data["data"][0] && data["data"][0]["sections"]) {
                    var results = data["data"][0]["sections"]
                    $('#search-info').text("Number of results: " + results.length)

                    $('#search-results').empty()
                    results.forEach(function(result) {
                        link = $('<a>')
                        link.text(result["title"])
                        link.attr('href', documenterBaseURL+'/'+result["docname"])
                        cat = $('<span class="category">('+result["category"]+')</span>')
                        li = $('<li>').append(link).append(" ").append(cat)
                        $('#search-results').append(li)
                    })
                } else {
                    $('#search-info').text("Internal Server Error.")
                }
            })
        }

        function update_search_box() {
            let querystring = $('#search-query').val()
            update_search(querystring)
        }

        $('#search-query').keyup(_.debounce(update_search_box, 250))
        $('#search-query').change(update_search_box)

        search_query_uri = parseUri(window.location).queryKey["q"]
        if(search_query_uri !== undefined) {
            search_query = decodeURIComponent(search_query_uri.replace(/\+/g, '%20'))
            $("#search-query").val(search_query)
        }
        update_search_box();
    })
})
